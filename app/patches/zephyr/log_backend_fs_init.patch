diff --git a/include/zephyr/logging/log_backend_fs.h b/include/zephyr/logging/log_backend_fs.h
new file mode 100644
index 00000000000..d3d4d1a390e
--- /dev/null
+++ b/include/zephyr/logging/log_backend_fs.h
@@ -0,0 +1,44 @@
+#pragma once
+
+/**
+ * @brief FS log backend API
+ * @defgroup log_backend_fs File System log backend API
+ * @ingroup log_backend
+ * @{
+ */
+
+#include <stdbool.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum backend_fs_state {
+	BACKEND_FS_NOT_INITIALIZED = 0,
+	BACKEND_FS_CORRUPTED,
+	BACKEND_FS_OK
+};
+
+/**
+ * @brief Get the fs logger backend
+ *
+ * @details This function returns the fs logger backend.
+ *
+ * @return Pointer to the fs logger backend.
+ */
+const struct log_backend *log_backend_fs_get(void);
+
+/**
+ * @brief Get the fs logger backend state
+ *
+ * @details This function returns the fs logger backend state.
+ *
+ * @return The fs logger backend state.
+ */
+enum backend_fs_state log_backend_fs_get_state(void);
+
+#ifdef __cplusplus
+}
+#endif
+
+/** @} */
diff --git a/subsys/logging/backends/log_backend_fs.c b/subsys/logging/backends/log_backend_fs.c
index b15c2c0fa03..f63dcd26ffc 100644
--- a/subsys/logging/backends/log_backend_fs.c
+++ b/subsys/logging/backends/log_backend_fs.c
@@ -11,6 +11,7 @@
 #include <zephyr/logging/log_backend_std.h>
 #include <assert.h>
 #include <zephyr/fs/fs.h>
+#include <zephyr/logging/log_backend_fs.h>
 
 #define MAX_PATH_LEN 256
 #define MAX_FLASH_WRITE_SIZE 256
@@ -18,12 +19,6 @@
 #define MAX_FILE_NUMERAL 9999
 #define FILE_NUMERAL_LEN 4
 
-enum backend_fs_state {
-	BACKEND_FS_NOT_INITIALIZED = 0,
-	BACKEND_FS_CORRUPTED,
-	BACKEND_FS_OK
-};
-
 static struct fs_file_t fs_file;
 static enum backend_fs_state backend_state = BACKEND_FS_NOT_INITIALIZED;
 static int file_ctr, newest, oldest;
@@ -434,6 +429,8 @@ LOG_OUTPUT_DEFINE(log_output, write_log_to_file, buf, MAX_FLASH_WRITE_SIZE);
 
 static void log_backend_fs_init(const struct log_backend *const backend)
 {
+	fs_file_t_init(&fs_file);
+	backend_state = BACKEND_FS_NOT_INITIALIZED;
 }
 
 static void panic(struct log_backend const *const backend)
@@ -496,3 +493,13 @@ static const struct log_backend_api log_backend_fs_api = {
 
 LOG_BACKEND_DEFINE(log_backend_fs, log_backend_fs_api,
 		   IS_ENABLED(CONFIG_LOG_BACKEND_FS_AUTOSTART));
+
+const struct log_backend *log_backend_fs_get(void)
+{
+	return &log_backend_fs;
+}
+
+enum backend_fs_state log_backend_fs_get_state(void)
+{
+	return backend_state;
+}
